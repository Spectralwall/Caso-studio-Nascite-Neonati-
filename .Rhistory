par(mfrow=c(2,2))
plot(mod9,id.n = 10)
#Rieseguiamo i test
#test di normalita --> ipotes di normalita
shapiro.test(residuals(mod9))
#test di Omoschedasticità --> ipotesi di omoschedacita
bptest(mod9)
#test di incorellazione
dwtest(mod9)
rmse(neonati.filtrato,mod9$residuals)
rmse(neonati.filtrato$Peso,mod9$residuals)
rmse(neonati.filtrato$Peso,exp(mod9$residuals)
rmse(neonati.filtrato$Peso,exp(mod9$residuals))
rmse(neonati.filtrato$Peso,exp(mod9$residuals))
rmse(neonati.filtrato$Peso,exp(mod9$residuals))
predictionTest = predict(mod9, newdata = test)
#use 70% of dataset as training set and 30% as test set
train <- neonati.filtrato %>% dplyr::sample_frac(0.95)
test  <- dplyr::anti_join(neonati.filtrato, train, by = 'id')
neonati.filtrato$id <- 1:nrow(neonati.filtrato)
#use 70% of dataset as training set and 30% as test set
train <- neonati.filtrato %>% dplyr::sample_frac(0.95)
test  <- dplyr::anti_join(neonati.filtrato, train, by = 'id')
predictionTest = predict(mod9, newdata = test)
#calcoliamo la stima Root Mean Square Error
#che misura l'errore medio eseguito dal modello nel prevedere l'esito di un'osservazione.
rmse(test$Peso, exp(predictionTest))
#calcolimao la stima MAE
#simile al rsme ma è meno influenzata dagli outliars
mae(test$Peso, exp(predictionTest))
mod9<- lm(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso,
data=train)
summary(mod9)
par(mfrow=c(2,2))
plot(mod9,id.n = 10)
predictionTest = predict(mod9, newdata = test)
#calcoliamo la stima Root Mean Square Error
#che misura l'errore medio eseguito dal modello nel prevedere l'esito di un'osservazione.
rmse(test$Peso, exp(predictionTest))
#calcolimao la stima MAE
#simile al rsme ma è meno influenzata dagli outliars
mae(test$Peso, exp(predictionTest))
#Rieseguiamo i test
#test di normalita --> ipotes di normalita
shapiro.test(residuals(mod9))
#test di incorellazione
dwtest(mod9)
#test di Omoschedasticità --> ipotesi di omoschedacita
bptest(mod9)
#Rieseguiamo i test
#test di normalita --> ipotes di normalita
shapiro.test(mod9)
#faccimao infine un plot che mostra per ogni regressore (sulle x) la retta con la variabile target sulle y
avPlots(mod9)
1/(1 - summary(lm(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso,,
data = dt_train[,1:100]))$r.squared)
1/(1 - summary(lm(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso,,
data = train[,1:100]))$r.squared)
1/(1 - summary(lm(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso,,
data = train))$r.squared)
ridge_fit <- lm.ridge(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso,
data=train,
lambda = seq(0, 400, by = 0.01))
library(MASS)
ridge_f it <- lm.ridge(log(Peso)~
ridge_fit <- lm.ridge(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso,
data=train,
lambda = seq(0, 400, by = 0.01))
select(ridge_fit)
ggp <- ggplot(data = as.data.frame(ridge_fit[c("lambda", "GCV")]),
mapping = aes(x=lambda, y=GCV)) +
geom_line() +
xlab("Lambda (parametro penalizzazione)") + ylab("Valori di generalized Cross-Validation (GCV)")
print(ggp)
y_pred_ridge <- as.numeric(cbind(1, as.matrix(test[, 1:(ncol(dt) - 1)])) %*% coef(ridge_fit))
y_pred_ridge <- as.numeric(cbind(1, as.matrix(test)) %*% coef(ridge_fit))
#faccimao infine un plot che mostra per ogni regressore (sulle x) la retta con la variabile target sulle y
avPlots(mod9)
#Peso---------------------------------------------------------------------------
summary(Peso)
summary.peso=analisi.quantitative(Peso,"Peso","Distribuzione Peso")
summary.peso
row.names(df_freq) <- c("[0,1000)","[1000,2000)","[2000,3000)","[3000,4000)","[4000,5000)")
classi = cut(Peso,seq(0,5000,1000))
df_freq = distribuzione_assoluta(classi)
row.names(df_freq) <- c("[0,1000)","[1000,2000)","[2000,3000)","[3000,4000)","[4000,5000)")
ggplot(data=df_freq, aes(x=reorder(row.names(df_freq), +fi), y=ni,fill=row.names(df_freq))) +
geom_bar(stat="identity")+
labs(title="Distribuzione in classi",
x="Classi",
y="Frequenza")+
theme_fivethirtyeight()+
theme(axis.title = element_text())+
guides(fill=guide_legend(title="Classi"))
#Lunghezza----------------------------------------------------------------------
summary(Lunghezza)
#Tipo parto---------------------------------------------------------------------
table(Tipo.parto)
#peso medio popolazione 3300 grammi (maschi di solito 150 grammi in più)
#useremo un test t non avendo tutte le infomazioni della distribuzione originale
#ipotesi nulla: che la la media del peso del nostro campione sia uguale alla media del peso della popolazione
t.test(Peso,
mu=3300,
conf.level = 0.95, #0.95 perche 1-alfa
alternative = "two.sided")
#peso medio popolazione 3300 grammi (maschi di solito 150 grammi in più)
#useremo un test t non avendo tutte le infomazioni della distribuzione originale
#ipotesi nulla: che la la media del peso del nostro campione sia uguale alla media del peso della popolazione
t.test(Peso,
mu=3300,
conf.level = 0.95, #0.95 perche 1-alfa
alternative = "two.sided")
#calcoliamo i valori soglia
valori.soglia = qt(c(0.05/2,1-0.05/2),Peso)
#facciamo un plot del grafo con i valori soglia e il risultato del test
ggplot()+
geom_density(aes(x=rt(100000,Peso)),col="darkblue",fill="lightblue")+
geom_point(aes(x=-1.505,y=0),col="green4",size=4)+
geom_vline(aes(xintercept=valori.soglia),
color="red", linetype="dashed", linewidth=1)+
theme_fivethirtyeight()
#lunghezza media popolazione 50 centimetri
#ipotesi nulla: che la media della lunghezza del campione sia uguale alla media della lunghezza della popolazione
t.test(Lunghezza,
mu=500,
conf.level = 0.95, #0.95 perche 1-alfa
alternative = "two.sided")
t.test(Lunghezza,
mu=500,
conf.level = 0.95, #0.95 perche 1-alfa
alternative = "two.sided")
#rifiutiamo ipotesi nulla di uguaglianza tra le distribuzioni
#quindi la media di lunghezza del nostro campione è significativamete diversa da quella della popolazione
#calcoliamo i valori soglia
valori.soglia = qt(c(0.05/2,1-0.05/2),Lunghezza)
#facciamo un plot del grafo con i valori soglia e il risultato del test
ggplot()+
geom_density(aes(x=rt(100000,Lunghezza)),col="darkblue",fill="lightblue")+
geom_point(aes(x=-10.069,y=0),col="green4",size=4)+
geom_vline(aes(xintercept=valori.soglia),
color="red", linetype="dashed", linewidth=1)+
theme_fivethirtyeight()
pairwise.t.test(Lunghezza, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
ggplot(data=neonati.filtrato)+
geom_boxplot(aes(x=Sesso,y=Lunghezza,fill=Sesso))+
labs(title="Distribuzione Lunghezza dei neonato per sesso",
x="Sesso",
y="Lunghezza")+
theme_fivethirtyeight()+
theme(axis.title = element_text(),legend.position='none')
#test sulla lunghezza
pairwise.t.test(Lunghezza, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sul peso
pairwise.t.test(Peso, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sul cranio
pairwise.t.test(Cranio, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sulle settimane di gestazione
pairwise.t.test(Gestazione, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sulla lunghezza
pairwise.t.test(Lunghezza, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sul peso
pairwise.t.test(Peso, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sul cranio
pairwise.t.test(Cranio, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sul cranio
pairwise.t.test(Cranio, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#test sulle settimane di gestazione
pairwise.t.test(Gestazione, Sesso,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#verificare che in alcuni ospedali si facciano più parti cesari
pairwise.t.test(neonati.filtrato$Tipo.parto, Ospedale,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
#verificare che in alcuni ospedali si facciano più parti cesari
pairwise.t.test(Tipo.parto, Ospedale,
paired = FALSE,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
distr_freq_ass_osp_tipo_parto = table(Ospedale,Tipo.parto)
distr_freq_ass_osp_tipo_parto
distr_freq_rel_osp_tipo_parto = table(Ospedale,Tipo.parto)/length(Ospedale)
distr_freq_rel_osp_tipo_parto
#Grafico a barro più esplicativo
ggplot(data=neonati.filtrato, aes(x=Ospedale, y=Tipo.parto,fill=Tipo.parto)) +
geom_bar(stat="identity")+
labs(title="Tipi di parti per Ospedale",x="Ospedali",y="Tipo di parto")+
theme_fivethirtyeight()+
theme(axis.title = element_text(),axis.text.y=element_blank())+
guides(fill=guide_legend(title="Tipo parto"))
neonati.numeric <- neonati.filtrato
neonati.numeric$Tipo.parto <- ifelse(neonati.filtrato$Tipo.parto=="Nat",1,0)
neonati.numeric$Sesso <- ifelse(neonati.filtrato$Sesso=="M",1,0)
neonati.numeric$Ospedale <- ifelse(neonati.filtrato$Ospedale=="osp1",1,
ifelse(neonati.filtrato$Ospedale=="osp2",2,3))
chart.Correlation(neonati.numeric,histogram=F, pch=19)
corrplot(cor(neonati.numeric),
method = "circle",
order = "hclust",         # Ordering method of the matrix
hclust.method = "ward.D", # If order = "hclust", is the cluster method to be used
addrect = 2,              # If order = "hclust", number of cluster rectangles
rect.col = 3,             # Color of the rectangles
rect.lwd = 3)
par(mfrow=c(1,1))
corrplot(cor(neonati.numeric),
method = "circle",
order = "hclust",         # Ordering method of the matrix
hclust.method = "ward.D", # If order = "hclust", is the cluster method to be used
addrect = 2,              # If order = "hclust", number of cluster rectangles
rect.col = 3,             # Color of the rectangles
rect.lwd = 3)
#Plotiamo degli scatterplot per analizzare meglio la correlazione e vedere se ci sono iterazioni non linerari
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Lunghezza,col=Sesso))+
labs(title="Correlazione Peso-Lunghezza per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#ipotiziamo un modello lineare
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Lunghezza,col=Sesso))+
stat_smooth(aes(x=Peso,y=Lunghezza,col=Sesso),method = "lm", size = 1)+
labs(title="Correlazione Peso-Lunghezza per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#ipotiziamo una modello con crescita logaritmica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Lunghezza,col=Sesso))+
stat_smooth(aes(x=Peso,y=Lunghezza,col=Sesso),method = "lm", formula = y ~ x + log(x), size = 1)+
labs(title="Correlazione Peso-Lunghezza per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#modello lineare con crescita quadratica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Cranio,col=Sesso))+
stat_smooth(aes(x=Peso,y=Cranio,col=Sesso),method = "lm", formula = y ~ x + I(1/x), size = 1)+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#ipotiziamo una modello con crescita logaritmica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Lunghezza,col=Sesso))+
stat_smooth(aes(x=Peso,y=Lunghezza,col=Sesso),method = "lm", formula = y ~ x + log(x), size = 1)+
labs(title="Correlazione Peso-Lunghezza per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#scatterplot
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Cranio,y=Peso,col=Sesso))+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#modello lineare con crescita quadratica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Cranio,col=Sesso))+
stat_smooth(aes(x=Peso,y=Cranio,col=Sesso),method = "lm", formula = y ~ x + I(1/x), size = 1)+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#mnodello lineare con cresciata logaritmica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Cranio,col=Sesso))+
stat_smooth(aes(x=Peso,y=Cranio,col=Sesso),method = "lm", formula = y ~ x + log(x), size = 1)+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#modello lineare con crescita quadratica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Cranio,col=Sesso))+
stat_smooth(aes(x=Peso,y=Cranio,col=Sesso),method = "lm", formula = y ~ x + I(1/x), size = 1)+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Cranio,col=Sesso))+
stat_smooth(aes(x=Peso,y=Cranio,col=Sesso),method = "lm",size = 1)+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#scatterplot
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Cranio,y=Peso,col=Sesso))+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#mnodello lineare con cresciata logaritmica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Cranio,col=Sesso))+
stat_smooth(aes(x=Peso,y=Cranio,col=Sesso),method = "lm", formula = y ~ x + log(x), size = 1)+
labs(title="Correlazione Peso-Cranio per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#scatterplot
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Gestazione,col=Sesso))+
labs(title="Correlazione Peso-Gestazione per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#scatterplot
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Gestazione,col=Sesso))+
labs(title="Correlazione Peso-Gestazione per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#crescita logaritmica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Gestazione,col=Sesso))+
stat_smooth(aes(x=Peso,y=Gestazione,col=Sesso),method = "lm", formula = y ~ x + log(x), size = 1)+
labs(title="Correlazione Peso-Gestazione per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Gestazione,col=Sesso))+
stat_smooth(aes(x=Peso,y=Gestazione,col=Sesso),method = "lm", formula = y ~ x + I(1/x), size = 1)+
labs(title="Correlazione Peso-Gestazione per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#crescita logaritmica
ggplot(data = neonati.filtrato)+
geom_point(aes(x=Peso,y=Gestazione,col=Sesso))+
stat_smooth(aes(x=Peso,y=Gestazione,col=Sesso),method = "lm", formula = y ~ x + log(x), size = 1)+
labs(title="Correlazione Peso-Gestazione per Sesso")+
theme_fivethirtyeight()+
theme(axis.title = element_text())
#use 70% of dataset as training set and 30% as test set
train <- neonati.filtrato %>% dplyr::sample_frac(0.95)
test  <- dplyr::anti_join(neonati.filtrato, train, by = 'id')
#ma ce un problema nello studio di queste variabili,aho paura che alcune siano troppo correlate e diano problemi di multicollinearita
#mqa verifichiamolo, costruiamo un modello
mod1<- lm(Peso~
Anni.madre+
N.gravidanze+
Gestazione+
Lunghezza+
Cranio+
Fumatrici+
Tipo.parto+
Ospedale+
Sesso,
data=train)
summary(mod1)
#sinceramente mi sento di rimuovere da questo modello la variabile ospedale poiche inutile ai fini dello studio
mod2 <- update(mod1,~.-Ospedale)
summary(mod2) #R quadro diminuisce di poco ma per prferiamo un modello piu semplice
anova(mod1,mod2)#il test rifiuta l'ipotesi nulla, quindi i modelli sono diversi
#allo stato attuale il modello a mio parere sarebbe corretto, sebbene le variabili anni madre e fumatrici vengono escluse dal T test
# io le menterrei come varibili di controllo. Ma per ricurezza faro un modello con meno variabili e vedro se performa meglio
mod3 <- update(mod2,~.-Anni.madre)
summary(mod3)
#proviamo a togliere fumatrici
mod4 <- update(mod3,~.-Fumatrici)
summary(mod4)
anova(mod3,mod4)
AIC(mod3,mod4)
#test multicollinearita
vif(mod4) #tutti i valori sotto 5 quindi non abbiamo multicollinearita
#da tutti i test ci risulta che la rimuzione di Anni.madre e Fumatrici non fa modificare la qualita del modello
#facciamo un ultimo test, creando un modello in cui evidenziamo che peso,lunghezza,circonferenza e gestazione anno crescita logaritmica
mod5<- lm(I(log(Peso))~
N.gravidanze+
I(log(Gestazione))+
I(log(Lunghezza))+
I(log(Cranio))+
Tipo.parto+
Sesso,
data=train)
summary(mod5)
summary(mod9)
mod9<- lm(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso+
Fumatrici+
Anni.madre,
data=train)
summary(mod9)
par(mfrow=c(2,2))
plot(mod9,id.n = 10)
#Rieseguiamo i test
#test di normalita --> ipotes di normalita
shapiro.test(residuals(mod9))
#test di Omoschedasticità --> ipotesi di omoschedacita
bptest(mod9)
#test di incorellazione
dwtest(mod9)
mean(Anni.madre)
table(Fumatrici)
#creiamo degli esempi fittizi
testMedian <- data.frame(Anni.madre=28,N.gravidanze = 3,Fumatrici=0,Gestazione=39,Lunghezza=500,Cranio=340,Tipo.parto="Nat",Sesso="F")
testMean <- data.frame(Anni.madre=28,N.gravidanze = 3,Fumatrici=0,Gestazione=39,Lunghezza=494.6958,Cranio=340.0292,Tipo.parto="Nat",Sesso="F")
#facciamo delle predizioni
predMedian = predict(mod9, newdata = testMedian)
predMean = predict(mod9, newdata = testMean)
predictionTest = predict(mod9, newdata = test)
exp(predMedian)
exp(predMean)
#calcoliamo la stima Root Mean Square Error
#che misura l'errore medio eseguito dal modello nel prevedere l'esito di un'osservazione.
rmse(test$Peso, exp(predictionTest))
#calcolimao la stima MAE
#simile al rsme ma è meno influenzata dagli outliars
mae(test$Peso, exp(predictionTest))
vif(mod9)
mod9<- lm(log(Peso)~
N.gravidanze+
log(Gestazione)+
log(Lunghezza)+
log(Cranio)+
Tipo.parto+
Sesso+
Fumatrici,
data=train)
summary(mod9)
#Rieseguiamo i test
#test di normalita --> ipotes di normalita
shapiro.test(residuals(mod9))
#test di Omoschedasticità --> ipotesi di omoschedacita
bptest(mod9)
#test di incorellazione
dwtest(mod9)
vif(mod9)
#creiamo degli esempi fittizi
testMedian <- data.frame(Anni.madre=28,N.gravidanze = 3,Fumatrici=0,Gestazione=39,Lunghezza=500,Cranio=340,Tipo.parto="Nat",Sesso="F")
testMean <- data.frame(Anni.madre=28,N.gravidanze = 3,Fumatrici=0,Gestazione=39,Lunghezza=494.6958,Cranio=340.0292,Tipo.parto="Nat",Sesso="F")
predMean = predict(mod9, newdata = testMean)
#facciamo delle predizioni
predMedian = predict(mod9, newdata = testMedian)
predictionTest = predict(mod9, newdata = test)
exp(predMedian)
exp(predMean)
summary(mod9)
#ma ce un problema nello studio di queste variabili,aho paura che alcune siano troppo correlate e diano problemi di multicollinearita
#mqa verifichiamolo, costruiamo un modello
mod1<- lm(Peso~
Anni.madre+
N.gravidanze+
Gestazione+
Lunghezza+
Cranio+
Fumatrici+
Tipo.parto+
Ospedale+
Sesso,
data=train)
summary(mod1)
